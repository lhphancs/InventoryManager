// <auto-generated />
using System;
using Inventory.Api.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Inventory.Api.Migrations
{
    [DbContext(typeof(InventoryContext))]
    partial class InventoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Inventory.Api.Aggregates.Product", b =>
                {
                    b.Property<string>("Upc")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("Brand")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ExpirationLocation")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("OunceWeight")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<bool>("RequiresBubbleWrap")
                        .HasColumnType("bit");

                    b.Property<bool>("RequiresPadding")
                        .HasColumnType("bit");

                    b.Property<byte[]>("ShelfLocationId")
                        .HasColumnType("varbinary(16)");

                    b.HasKey("Upc");

                    b.HasIndex("ShelfLocationId")
                        .IsUnique();

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Inventory.Api.Aggregates.Shelf.Shelf", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Shelf");
                });

            modelBuilder.Entity("Inventory.Api.Aggregates.Shelf.ShelfLocation", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("varbinary(16)");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<int>("Row")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ShelfLocation");
                });

            modelBuilder.Entity("Inventory.Api.Aggregates.Product", b =>
                {
                    b.HasOne("Inventory.Api.Aggregates.Shelf.ShelfLocation", "ShelfLocation")
                        .WithOne()
                        .HasForeignKey("Inventory.Api.Aggregates.Product", "ShelfLocationId");
                });

            modelBuilder.Entity("Inventory.Api.Aggregates.Shelf.ShelfLocation", b =>
                {
                    b.HasOne("Inventory.Api.Aggregates.Shelf.Shelf", null)
                        .WithMany("ShelfLocations")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
